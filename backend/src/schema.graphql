# Date type. See resolvers/Date.js
# scalar Date
scalar Upload
# See resolvers/Query.js
type Query {
    restaurants: String! ## recommand restaurants
    restaurantDetail(restaurantId: ID!): Restaurant ## given an restaurantId, return the restaurant's detail
    searchRestaurants(keyword: String!): [Restaurant] ## searchRestaurants
    files(userId: ID!): [File] ## search the user's files
    collection(fileId: ID!): [Restaurant] ## search the folder's collections
    bomb(userId: ID!): [Restaurant] ## return the bomb of it
    searchTag(keyword: String!): [Tag] ## for adding tags
}


# Status of a restaurant. See resolvers/Status.js.
enum Status {
  PICKED
  LIKE
  BOMB
}

# See resolvers/Mutation.js
type Mutation {
    createRestaurant( input: RestaurantInput! ): Restaurant! ## photo type may need to change
    createTag(id: ID!, type: String!, name: String!): Tag!
    createFile(userId: ID!, title: String!): File!
    addBomb(userId: ID!, restaurantId: ID!): String! ##string specify whether it's successfully created
    addCollection(userId: ID!, restaurantID: ID!, fileId: ID!): String! ##string specify whether it's successfully created
    addComment(userId: ID!, restaurantId: ID!, content: String!, star: Int! ): Comment!
}

input RestaurantInput{
    id: ID!
    title: String!
    photo: Upload!
    link: String
    tagIds: [String]
}

type Restaurant{
    id: ID!
    title: String!
    stars: Float!
    photo: ID! ## url 
    link: String
    tags: [Tag!]
    comments: [Comment]
}

type Tag{
    id: ID!
    type: String!
    name: String!
}
input TagInput{
    id: ID!
    type: String!
    name: String!
}
type Comment{
    id: ID!
    userId: ID!
    restaurantId: ID!
    content: String!
    star: Int!
}

# See resolvers/Subscription.js
type Subscription {
  # Notify a restaurant created
  ## restaurantCreated: Restaurant!
  
  fileCreated: File!
}

type File{
  id: ID!
  title: String!
  restaurants: [Restaurant]
}
